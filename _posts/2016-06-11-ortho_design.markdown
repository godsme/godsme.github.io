---
layout: post
title: "正交设计"
date:   2016-06-10 19:39:14
categories: software design
location: 深圳,中国
---

当谈起**软件设计**的目的时，能够获得所有人认同的答案只有一个：**功能实现**。 因为这是一个软件存在的根本原因。
而在计算机软件发展的初期，这一点也正是所有人做软件设计的唯一动机。因而，很自然的，整个软件都被放在单一过程中，然后用到处存在的`goto`语句控制流程。
很快，随着需求的复杂，即便是智商最为发达的程序员也发现，单一过程的复杂度已经超出他的掌控极限。这逼迫人们必须从两个方面改善程序的设计:1. 让程序更容易理解。于是**结构化编程**得以出现,以抑制 goto 所带来的可理解 性问题;2. 对大问题进行分解,分而治之。于是**模块化**的思想开始浮现。时至今日，**结构化编程**已经成为常识，以至于非结构化的方式似乎从未存在过。即便人们进行争论，也是在另外一个层面：`a=a+1`这样的代码是否合理；分支控制，到底该用`if-else`，还是运行时多态，还是模式匹配；到底迭代更优，还是递归更自然。但无论如何，质疑结构化编程的程序员已基本绝迹。即便`goto`语句依然存在, 也仅仅被用在有助于可理解性的场合。
分而治之
===
对于**分而治之**的策略，人们似乎也已经没有争议。尽管理论上讲，任意复杂的系统都可以被放入同一个函数里。但现实中，几乎没有人会那么做。尽管超大函数，**上帝类**并不罕见，但当大到一定程度，**上帝类**的创造者最终也会发现自己终究没有上帝般的掌控力。因而，哪怕是软件设计素养为负值的开发者，或多或少也会对一个复杂系统进行一定程度的拆分。
一旦人们开始进行进行拆分，就必须解决如下两个问题:
1. 究竟单元该怎样划分（比如划分模块或者类）才是合理的?2. 将一个大单元划分为多个小单元之后，这些小单元之间很可能存在衔接点，这样它们才可以相互配合以完成大单元肩负的职责。如果我们把这些衔接点看作API，那么问题就变为：怎样定义API才是合理的?
而这两个问题的答案，正是现代软件设计的核心关注点。
软件设计的目的
===
为了找到这两个问题的答案，我们需要重新回到最初的问题：为何需要软件设计?
Kent Beck给出的答案是：**软件设计是为了在让软件在长期范围内容易应对变化**。
在这个精炼的定义中，包含着三个关键词：**长期**，**容易**，**变化**。这意味着:
1. 越是需要长期维护的项目，变化更多，也更难预测变化的方式;2. 软件设计，事关成本;3. 如何在难以预测的千变万化中，保持低廉的变更成本，正是软件设计要解决的问题。对此，Kent Beck提出了一个更为精炼的原则：**局部化影响**。意思是说，我们希望任何一个变化，对于我们当前的软件设计影响范围都可以控制在一个尽量小的局部。
￼这当然是所有严肃的软件从业者都梦寐以求的。对于项目的投资者，这意味着更少的金钱投入；对于项目经理，不用再做夹心饼干，两头受气；而对于程序员，则意味着更加轻松愉快的职业生涯。
可问题在于,如何才能做到**局部化影响**?
高内聚,低耦合
===
每个读过基础软件工程教程的人都知道：一个易于应对变化的软件设计应该遵从**高内聚,低耦合**原则。
所谓**内聚性**，关注的是一个软件单位内部的关联紧密程度。因而**高内聚**追求的是“关联紧密的事物应该被放在一起”,并且“只有关联紧密的事物才应该被放在一起”。一句话总结，就是Unix的设计哲学:
>Do One Thing, Do It Well.
而**耦合性**，则是强调两个或多个软件单位之间的关联紧密程度。因而**低耦合**追求的是，软件单位之间尽可能不要相互影响。
这样的解释，对于很多人而言，依然会感到过于抽象。但如果我们进一步思考，就会意识到：看似神秘的内聚与耦合，正好对应最初的两个问题：
1. 当我们划分软件单元时，要让每个软件单元都尽可能**高内聚**; 2. 而当我们定义单元之间的API时，需要让双方尽可能**低耦合**。
如果用图来展现，就是下面的过程与关系:
这幅图揭示了，对于三方实体：无论是**客户**,API,还是API的**实现**，一个好的设计，都应该尽可能提高它们的**内聚度**；而**耦合**，发生在**客户**与API之间，所以我们要尽可能降低的**客户**与API之间的**耦合度**。
正交
===
除了**内聚**与**耦合**之外，上面这幅图还揭示了另外一种关系：**正交**。具备正交关系的两个软件单位，可以做到一方的变化，不会影响另外一方的变化。换句话说, 双方各自独自变化，互不影响。
**正交**意味着**零耦合**。很自然我们知道，如果两个软件单位之间没有任何关联,，它们天然就是**正交**的。如下图所示。
回到之前所述的三方关系中，**客户**与API**实现**之间并没有任何**耦合**,因而它们之间也应该是**正交**的。
而**正交性**,直接回应了Kent Beck的理想: **局部化影响**。